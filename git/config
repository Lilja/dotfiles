[include]
	# Load the local gitconfig containing information about the user.
	path = config.local
[include]
	path = $XDG_CONFIG_HOME/git/catppuccin.gitconfig
[init]
	defaultBranch = master

[alias]
	# Tree output of commits for current branch.
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

	# Lazy shortcuts
	st          = status
	co          = checkout
	br          = branch
	ci          = commit
	brv         = branch -v
	brva        = branch -va
	cont        = rebase --continue
	ff          = merge --ff-only
	ffpull      = pull --ff-only
	mt          = mergetool
	poh					= "!git pull --ff-only origin $(git rev-parse --abbrev-ref HEAD)"
	ffp 		= pull --ff-only
	cdb         = "!f() { git switch $(cat $(git rev-parse --git-dir)/refs/remotes/origin/HEAD | cut -d'/' -f4); }; f"
	done				= "!git checkout $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@') && git branch -D @{-1}; git pull origin $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@');"

	# Amends the commit(ninja) and force pushes with friendly --force-with-lease flag
	friendly-ninja = "!git commit --amend --no-edit && git push --force-with-lease"

	# Create a temporary commit and push to current branch
	temp-commit = "!git add -u && git ci -m \"Trash commit\" && git push origin CURRENT_BRANCH_NAME"

	# -p removes outdated remote branches.
	# It basically does `git remote prune origin`
	pfetch = fetch --prune

	# Read as remove from staging
	unstage = reset HEAD

	# Read as diff-cached
	diffc = diff --cached

	# Creating fast snapshots for the current dirty files.
	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

	# See contributors of a repo, sorted on amount of commits
	# Cred to @flygare
	contributors = shortlog --summary --numbered

	# Delete branches which have been merged
	delete-merged-branches = "!f() { git checkout --quiet master && git branch --merged | grep --invert-match '\\*' | xargs -n 1 git branch --delete; git checkout --quiet @{-1}; }; f"

	delete-merged-branches2 = "!dmbb() { git br | grep -v 'master' | xargs git br -d; }; dmbb"

        bro = "!go() { git for-each-ref --sort=-committerdate refs/heads --format='%(HEAD)%(color:yellow)%(refname:short);%(color:bold green)%(committerdate:relative);%(color:blue)%(subject);%(color:magenta)%(authorname)%(color:reset)' --color=always|column -ts';'; }; go"
        conflicted = "!conf() { vim +Conflicted; }; conf"

[push]
	default = current
[pull]
	default = current

[core]
	# Vim is my editor
	editor = vim


	# Set diff so that a tab is 4 char length
	pager = delta
	ignorecase = false

[color]
	# Add some color to your everyday life
	ui = auto
	diff = auto
	branch = auto
	interactive = auto
	status = auto
[interactive]
	diffFilter = delta --color-only

[delta]
	navigate = true    # use n and N to move between diff sections
	line-numbers = true
	hyperlinks = true
	hunk-header-style = "syntax"
	features = catppuccin-mocha

	# delta detects terminal colors automatically; set one of these to disable auto-detection
	# dark = true
	# light = true

[color "branch"]
	current = white
	local = yellow
	remote = green
[branch "master"]
	remote = origin
	merge = refs/heads/master
[merge]
	tool = vimdiff
	conflictstyle = diff3
