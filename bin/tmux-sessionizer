#!/usr/bin/env bash

# Check if "TMUX_SESSIONIZER_CODE_DIRS" and "TMUX_SESSIONIZER_CODE_DIRS" environmental variables exists

TMUX_SESSIONIZER_CODE_DIRS=$TMUX_SESSIONIZER_CODE_DIRS
TMUX_SESSIONIZER_TOP_LEVEL_DIRS=$TMUX_SESSIONIZER_TOP_LEVEL_DIRS


if [ -z "$TMUX_SESSIONIZER_TOP_LEVEL_DIRS" ]; then
    echo "No TMUX_SESSIONIZER_TOP_LEVEL_DIRS variable set"
    exit 1
fi

if [ -z "$TMUX_SESSIONIZER_CODE_DIRS" ]; then
    echo "No TMUX_SESSIONIZER_CODE_DIRS variable set"
    exit 1
fi

code_dirs=$TMUX_SESSIONIZER_CODE_DIRS
top_level_dirs=$TMUX_SESSIONIZER_TOP_LEVEL_DIRS

if [[ $1 == "roots" ]]; then
    # Treat code_dirs just like top_level_dirs
    selected=$((echo "$top_level_dirs" && echo "$code_dirs") | fzf)
else
    # Compile a list of directories to search
    # We want to search the top level dirs and the top level dirs of the code dirs
    # Loop through the code dirs and find their top level dirs
    # Then add the top level dirs to the list of dirs to search
    input_dirs=()
    echo "Input dirs"
    for code_dir in $code_dirs; do
        while IFS= read -r dir; do
            echo "$dir"
            input_dirs+=("$dir")
        done < <(find "$code_dir" -mindepth 1 -maxdepth 1 -type d)
    done
    input_dirs=$(printf "%s\n" "${input_dirs[@]}")

    selected=$((echo "$top_level_dirs" && echo "$input_dirs") | fzf)
fi

if [[ -z $selected ]]; then
    exit 0
fi

selected_name=$(basename "$selected" | tr . _)
tmux_running=$(pgrep tmux)

if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
    tmux new-session -s $selected_name -c $selected
    exit 0
fi

if ! tmux has-session -t=$selected_name 2> /dev/null; then
    tmux new-session -ds $selected_name -c $selected
fi

tmux switch-client -t $selected_name
