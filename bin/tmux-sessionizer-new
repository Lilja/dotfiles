#!/usr/bin/env bash

# Check if "TMUX_SESSIONIZER_CODE_DIRS" and "TMUX_SESSIONIZER_CODE_DIRS" environmental variables exists

TMUX_SESSIONIZER_CODE_DIRS=$TMUX_SESSIONIZER_CODE_DIRS
TMUX_SESSIONIZER_TOP_LEVEL_DIRS=$TMUX_SESSIONIZER_TOP_LEVEL_DIRS
LOG_FILE=$DOTFILE_DIR/tmux-sessionizer.log


if [ -z "$TMUX_SESSIONIZER_TOP_LEVEL_DIRS" ]; then
    echo "No TMUX_SESSIONIZER_TOP_LEVEL_DIRS variable set"
    exit 1
fi

if [ -z "$TMUX_SESSIONIZER_CODE_DIRS" ]; then
    echo "No TMUX_SESSIONIZER_CODE_DIRS variable set"
    exit 1
fi

function switch_to_tmux_session() {
    echo "Starting a new tmux session $repo in $current_dir"
    tmux_session_name=$1
    tmux_start_dir=$2
    tmux new-session -s $tmux_session_name -c $tmux_start_dir
}


function init_with_pnpm() {
    # base directory is sent as an argument
    base_dir=$1
    # Init or create??
    init="Init a new package(pnpm init)"
    create="Create a new package(pnpm create)"
    selected_action=$((echo "$init" && echo "$create") | fzf)

    if [[ $init == $selected_action ]]; then
        pushd $base_dir
        read -p "Enter the directory name: " dir_name
        mkdir $dir_name
        pushd $dir_name
        pnpm init; popd
    fi
    if [[ $create == $selected_action ]]; then
        # Make the user pick what starter kit to use
        read -p "Enter the starter kit name: " starter_kit
        pushd $base_dir
        pnpm create $starter_kit; popd
    fi
}

function init_with_poetry() {
    # base directory is sent as an argument
    base_dir=$1

    pushd $base_dir

    read -p "Enter the directory name: " dir_name
    mkdir $dir_name
    pushd $dir_name
    current_dir=$(pwd)
    poetry init $dir_name; popd
    switch_to_tmux_session $dir_name "$current_dir/$dir_name"
}

function init_with_cargo() {
    base_dir=$1

    pushd $base_dir
    read -p "Enter the directory name: " dir_name
    mkdir $dir_name
    pushd $dir_name
    current_dir=$(pwd)
    cargo init --name $dir_name; popd
    switch_to_tmux_session $dir_name "$current_dir/$dir_name"
}

function init_with_gleam() {
    base_dir=$1

    pushd $base_dir
    read -p "Enter the directory name: " dir_name
    mkdir $dir_name
    pushd $dir_name
    current_dir=$(pwd)
    gleam new; popd
    switch_to_tmux_session $dir_name "$current_dir/$dir_name"
}

function init_with_go() {
    base_dir=$1

    pushd $base_dir
    read -p "Enter the directory name: " dir_name
    mkdir $dir_name
    pushd $dir_name
    current_dir=$(pwd)
    go mod init $dir_name; popd
    switch_to_tmux_session $dir_name "$current_dir/$dir_name"
}


function clone_with_git() {
    local base_dir="$1"
    local git_url="$2"
    local clone_option="$3"

    pushd "$base_dir"
    local current_dir=$(pwd)
    local repo=$(echo "$git_url" | sed 's#.*/##' | sed 's/\.git$//')

    if [[ "$clone_option" == "Shallow (--depth 1)" ]]; then
        echo "Cloning shallowly(--depth 1)..."
        git clone --depth 1 "$git_url"
    else
        echo "Cloning fully..."
        git clone "$git_url"
    fi
    popd

    switch_to_tmux_session "$repo" "$current_dir/$repo"
}

function clone_with_ssh() {
    local base_dir="$1"
    read -p "Enter the github user/repo combination: " git_path
    local github_ssh_url="git@github.com:$git_path.git"
    local selected_clone_option=$((echo "Full clone" && echo "Shallow (--depth 1)") | fzf)

    if [[ ! -z "$selected_clone_option" ]]; then
        clone_with_git "$base_dir" "$github_ssh_url" "$selected_clone_option"
    fi
}

function clone_with_https() {
    local base_dir="$1"
    read -p "Enter the github user/repo combination: " git_path
    local github_https_url="https://github.com/$git_path"
    local selected_clone_option=$((echo "Full clone" && echo "Shallow (--depth 1)") | fzf)

    if [[ ! -z "$selected_clone_option" ]]; then
        clone_with_git "$base_dir" "$github_https_url" "$selected_clone_option"
    fi
}

function create_barebone() {
    base_dir=$1
    pushd $base_dir
    read -p "Enter the directory name: " dir_name
    mkdir $dir_name
    current_dir=$(pwd)
    popd
    switch_to_tmux_session $dir_name "$current_dir/$dir_name"
}



selected_root_dir=$((echo "$TMUX_SESSIONIZER_CODE_DIRS" | tr ' ' '\n' | sed '/^[[:space:]]*$/d' && echo "$TMUX_SESSIONIZER_TOP_LEVEL_DIRS") | fzf)
if [[ ! -z $selected_root_dir ]]; then
    # Let the user select what to do. Either create a new directory(mkdir) or git clone
    barebone="Create a new barebone directory(mkdir)"
    clone_https="Git clone(https)"
    clone_ssh="Git clone(ssh)"
    new_package="Init from package manager(pnpm, cargo, etc)"
    selected_action=$((echo "$barebone" && echo "$clone_https" && echo "$clone_ssh" && echo "$new_package") | fzf)

    if [[ ! -z $selected_action ]]; then
        echo $selected_action
        if [[ $clone_ssh == $selected_action ]]; then
            clone_with_ssh $selected_root_dir
        fi
        if [[ $clone_https == $selected_action ]]; then
            clone_with_https $selected_root_dir
        fi
        if [[ $barebone == $selected_action ]]; then
            create_barebone $selected_root_dir
        fi
        if [[ $new_package == $selected_action ]]; then
            binaries="poetry pnpm cargo gleam go"
            selected_package_manager=$(echo "$binaries" | sed 's#\s\+#\n#g' | fzf)

            if [[ $selected_package_manager == "pnpm" ]]; then
                init_with_pnpm $selected_root_dir
            fi
            if [[ $selected_package_manager == "poetry" ]]; then
                init_with_poetry $selected_root_dir
            fi
            if [[ $selected_package_manager == "cargo" ]]; then
                init_with_cargo $selected_root_dir
            fi
            if [[ $selected_package_manager == "gleam" ]]; then
                init_with_gleam $selected_root_dir
            fi
            if [[ $selected_package_manager == "go" ]]; then
                init_with_go $selected_root_dir
            fi

        fi
    fi
fi

