" ============================== XDG_CONFIG STUFF =====================
set rtp+=$XDG_CONFIG_HOME/vim
set rtp+=$XDG_CACHE_HOME/vim

call plug#begin("$XDG_CACHE_HOME/$VIM_PLUGIN_DIR")

" ============================== Plugins ==============================

" Status bar revamp
Plug 'vim-airline/vim-airline'

" Git diffs
Plug 'airblade/vim-gitgutter'

" Tree visualiser
Plug 'scrooloose/nerdtree'

" EditorConfig support
Plug 'editorconfig/editorconfig-vim'

" Vue support
Plug 'posva/vim-vue'

" Rainbow parenthesis
Plug 'luochen1990/rainbow'

" Clojure syntax highlighting
Plug 'guns/vim-clojure-static'

" Python syntax highlighting
Plug 'vim-python/python-syntax'

" Fish syntax
Plug 'dag/vim-fish'


" Autocomplete test
if has('python3')
    if has('nvim')
      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    else
      Plug 'Shougo/deoplete.nvim'
      Plug 'roxma/nvim-yarp'
      Plug 'roxma/vim-hug-neovim-rpc'
    endif
    let g:deoplete#enable_at_startup = 1
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
endif


call plug#end()
" ============================== General ==============================

" When re opening file, return to the latest known line
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Language
set langmenu=en_US

" Sound. Vim please be quiet. Looking at you, GVim
set noerrorbells
set vb t_vb=
autocmd GUIENTER * set vb t_vb=

" Interactive search
set hlsearch

" Real time search matches
set incsearch

" Timeout delay for <Esc>
set timeoutlen=1000 ttimeoutlen=0


" ============================== Line numbers ==============================
" Line numbers
if version >= 703
	set relativenumber
endif
set number

" ============================== Mappings ==============================

" Lazy remaps
nmap :W :w
nmap :Q :q
imap jj <Esc>

" Remaps
" c-l clears text of searches
nnoremap <c-l> <c-l>:noh<cr>
nnoremap <F2> i<CR><ESC>

" Say no to ex mode.
map Q <Nop>

" Leader, an extra modifier
let g:mapleader = ","

nmap <leader>w :w<CR>
nmap <leader>q :q<CR>
nmap <leader>e 5<C-E>
nmap <leader>y 5<C-Y>

" <leader>src to reload vimrc config
nnoremap <leader>src :source ~/.config/vim/vimrc<CR>

" <leader>edit to edit .vimrc
nnoremap <leader>edit :vsp ~/.config/vim/vimrc<CR>

map <leader>nt :NERDTreeToggle<CR>
map <leader>pi :PlugInstall<CR>
map <leader>rt :RainbowToggle<CR>
map <leader>rld :source %<CR>

" https://superuser.com/a/321726
nnoremap <leader>d "_d
vnoremap <leader>d "_d
vnoremap <leader>p "_dp

" ============================== Indentation ==============================
set autoindent
set smartindent
" There is a bug where printing a # sign when inside insert mode produces no ident. This fixes it. http://vim.wikia.com/wiki/Restoring_indent_after_typing_hash
set cindent
set cinkeys-=0#
set indentkeys-=0#

" Indent options
" set tabstop=2 " How many columns will a tab look like
" set shiftwidth=2 " How many columns will be indented when using << or >>
" set softtabstop=2 " Idk.
" set expandtab " expandtab=tab will be converted to spaces

" Spaces configuration
:set tabstop=4 shiftwidth=4 expandtab

" Tab configuration, show 2 spaces as 1 tab char
" set tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab

" When editing the following file(s), use the prefered method of tab/spaces
autocmd BufRead gitconfig setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab

" Python files should not be indented with spaces
au BufRead,BufNewFile *.py set expandtab
" Python
:set tabstop=8 expandtab shiftwidth=4 softtabstop=4

" Toggle the possibility to replace indentation chars with icons/unicode chars.
set list

" Set a tab to be >> and a space. A trailing whitespace is a bullet.
set listchars=tab:»\ ,trail:•

" Set that a trailing whitespace has a yellow color
highlight ExtraWhitespace ctermfg=yellow

" Regex match for it
match ExtraWhitespace /\s\+$/

function! TabTwoSpace()
    set tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab
endfunction

" ============================== UI Config ==============================
" Syntax
syntax on
filetype plugin indent on
let g:python_highlight_all = 1

" Looks
set background=dark

" Set 256 color support
set t_Co=256

" Colorscheme
colorscheme gruvbox

" SSH config syntax for my own ssh config
if expand('%:p') =~ "dotfiles/ssh/config"
	setf sshconfig
endif

" ============================== StatusLine ==============================
" Statusline
" Always show the statusline in the terminal
set laststatus=2
" Language
set langmenu=en_US
