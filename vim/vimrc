" ============================== XDG_CONFIG STUFF =====================
set rtp+=$XDG_CONFIG_HOME/vim
set rtp+=$XDG_CACHE_HOME/vim

call plug#begin("$XDG_CACHE_HOME/$VIM_PLUGIN_DIR")

" ============================== Plugins ==============================

" Status bar revamp
Plug 'itchyny/lightline.vim'

" Git diffs
Plug 'mhinz/vim-signify', { 'branch': 'legacy' }

" Tree visualiser
Plug 'scrooloose/nerdtree'

" EditorConfig support
Plug 'editorconfig/editorconfig-vim'

" Vue support
Plug 'posva/vim-vue'

" Rainbow parenthesis
Plug 'junegunn/rainbow_parentheses.vim'

" Python syntax highlighting
Plug 'vim-python/python-syntax'

" Fish syntax
Plug 'dag/vim-fish'

" Toml syntax
Plug 'cespare/vim-toml'

" Required by markdown
Plug 'godlygeek/tabular'

" Markdown
" Plug 'plasticboy/vim-markdown'

" Markdown preview
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}

" Shebang detection file syntax
Plug 'vitalk/vim-shebang'

" Gruvbox theme
Plug 'morhetz/gruvbox'

" Journaling(1/2). Enables a distraction free mode.
Plug 'junegunn/goyo.vim'

" Journaling(2/2). Makes non-cursor text stand out less.
Plug 'junegunn/limelight.vim'

" Python
Plug 'w0rp/ale'
Plug 'ambv/black'
Plug 'Vimjas/vim-python-pep8-indent'

" Fuzzy file finder
Plug '~/.fzf'
Plug 'junegunn/fzf.vim'
Plug 'mhinz/vim-startify'
Plug 'dracula/vim'

" Autocomplete test
if has('python3')
    if has('nvim')
      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    else
      Plug 'Shougo/deoplete.nvim'
      Plug 'roxma/nvim-yarp'
      Plug 'roxma/vim-hug-neovim-rpc'
    endif
    let g:deoplete#enable_at_startup = 1
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
endif


call plug#end()
" ============================== General ==============================

" When re opening file, return to the latest known line
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Language
set langmenu=en_US

" Sound. Vim please be quiet. Looking at you, GVim
set noerrorbells
set vb t_vb=
autocmd GUIENTER * set vb t_vb=

" Interactive search
set hlsearch

" Real time search matches
set incsearch

" Timeout delay for <Esc>
set timeoutlen=1000 ttimeoutlen=0

set encoding=UTF-8

" ============================== Functions ==============================


fun! ToggleJournal()
    " Color name (:help cterm-colors) or ANSI code
    let g:limelight_conceal_ctermfg = 100

    " Color name (:help gui-colors) or RGB color
    let g:limelight_conceal_guifg = '#83a598'

    execute 'Goyo'
    execute 'Limelight!!'
endfun

fun! ToggleRainbow()
    if exists(":RainbowParentheses")
        execute 'RainbowParentheses'
    endif
endfun



" ============================== Line numbers ==============================
" Line numbers
if version >= 703
	set relativenumber
endif
set number

" ============================== Mappings ==============================

" Lazy remaps
nmap :W :w
nmap :Q :q

" Remaps
" c-l clears text of searches
nnoremap <c-l> <c-l>:noh<cr>

" Say no to ex mode.
map Q <Nop>

" Leader, an extra modifier
let g:mapleader = ","

nmap <leader>w :w<CR>
nmap <leader>q :q<CR>

map <leader>nt :NERDTreeToggle<CR>
map <leader>pi :PlugInstall<CR>
map <leader>rt :call RainbowToggle()<CR>
map <leader>rld :source %<CR>

" https://superuser.com/a/321726
nnoremap <leader>d "_d
vnoremap <leader>d "_d
vnoremap <leader>p "_dp
vnoremap <leader>P "_dP

" ,cv = change vim
nnoremap <leader>cv :e $MYVIMRC<CR>
" ,fish = change fish
nnoremap <leader>fish :e ~/.config/fish/config.fish<CR>
" ,jo = Journal mode
nnoremap <leader>jo :call ToggleJournal()<CR>

nnoremap <leader>ff :Files<CR>
nnoremap <leader>ff :Files<CR>

" https://superuser.com/a/941082
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

" ============================== UI Config ==============================
" Syntax
set termguicolors
syntax on
filetype plugin indent on
let g:python_highlight_all = 1

" Looks
set background=dark

" Set 256 color support
set t_Co=256

let g:dracula_italic = 0
" Colorscheme
" colorscheme gruvbox
colorscheme dracula
let g:lightline = {
  \ 'colorscheme': 'dracula'
\}

" SSH config syntax for my own ssh config
if expand('%:p') =~ "dotfiles/ssh/config"
	setf sshconfig
endif

function PythonIndent()
    echom "Called!"
    set expandtab           " enter spaces when tab is pressed
    set textwidth=120       " break lines when line length increases
    set tabstop=4           " use 4 spaces to represent tab
    set softtabstop=4
    set shiftwidth=4        " number of spaces to use for auto indent
endfunction

" ============================== Indentation ==============================
set autoindent
" There is a bug where printing a # sign when inside insert mode produces no ident. This fixes it. http://vim.wikia.com/wiki/Restoring_indent_after_typing_hash
" set cindent
" set cinkeys-=0#
" set indentkeys-=0#

" Indent options
" set tabstop=2 " How many columns will a tab look like
" set shiftwidth=2 " How many columns will be indented when using << or >>
" set softtabstop=2 " Idk.
" set expandtab " expandtab=tab will be converted to spaces

" Spaces configuration
:set tabstop=4 shiftwidth=4 expandtab

" Tab configuration, show 2 spaces as 1 tab char
" set tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab

" When editing the following file(s), use the prefered method of tab/spaces
autocmd BufRead gitconfig setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab

" Python files should not be indented with spaces
au BufRead,BufNewFile *.py set expandtab
" SSH config syntax for my own ssh config
au BufRead *ssh/config setf sshconfig
" Python
:set tabstop=8 expandtab shiftwidth=4 softtabstop=4

" Toggle the possibility to replace indentation chars with icons/unicode chars.
set list

" Set a tab to be >> and a space. A trailing whitespace is a bullet.
set listchars=tab:»\ ,trail:•

" Set that a trailing whitespace has a yellow color
highlight ExtraWhitespace ctermfg=yellow

" Regex match for it
match ExtraWhitespace /\s\+$/

function! TabTwoSpace()
    set tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab
endfunction
" vim, treat backspace as normal
set backspace=indent,eol,start

" ============================== StatusLine ==============================
" Statusline
" Always show the statusline in the terminal
set laststatus=2
" Language
set langmenu=en_US
"
" ============================== Plugin Init ==============================

if exists(":RainbowParentheses")
    execute 'RainbowParentheses'
endif

" ALE
if exists('g:ale_enabled')
    let g:ale_set_signs = 1
    highlight ALEError ctermbg=red cterm=underline
    highlight ALEWarning cterm=underline
    highlight AleErrorSign None
endif

let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

" Cheat sheet
" Ctrl + W = Resize window splits
"
