" ============================== XDG_CONFIG STUFF =====================
set rtp+=$XDG_CONFIG_HOME/vim
set rtp+=$XDG_CACHE_HOME/vim

call plug#begin("$XDG_CACHE_HOME/$VIM_PLUGIN_DIR")

" ============================== Plugins ==============================

" Status bar revamp
Plug 'itchyny/lightline.vim'

" Git diffs
if has('nvim') || has('patch-8.0.902')
    Plug 'mhinz/vim-signify'
else
    Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
endif

" Tree visualiser
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" EditorConfig support
Plug 'editorconfig/editorconfig-vim'

" Vue support
" Plug 'posva/vim-vue'
Plug '~/code/vim-project-root'

" Rainbow parenthesis
Plug 'junegunn/rainbow_parentheses.vim'

" Python syntax highlighting
Plug 'vim-python/python-syntax'

" Fish syntax
Plug 'dag/vim-fish'

" Toml syntax
Plug 'cespare/vim-toml', {'branch': 'main'}

" Required by markdown
Plug 'godlygeek/tabular'

" Markdown
" Plug 'plasticboy/vim-markdown'

" Markdown preview
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}

" Shebang detection file syntax
Plug 'vitalk/vim-shebang'

" Gruvbox theme
" Plug 'morhetz/gruvbox'

" Journaling(1/2). Enables a distraction free mode.
Plug 'junegunn/goyo.vim'

" Journaling(2/2). Makes non-cursor text stand out less.
Plug 'junegunn/limelight.vim'
"
" Journaling in public
Plug 'ernstwi/vim-secret'

" Tests
Plug 'vim-test/vim-test'

" Python
" Plug 'w0rp/ale'
Plug 'ambv/black', { 'tag': '20.8b1', 'on': 'Black' }
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'nvie/vim-flake8'
Plug 'jmcantrell/vim-virtualenv'
" Plug 'petobens/poet-v'

" Javascript
Plug 'pangloss/vim-javascript'
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'svelte', 'yaml', 'html'] }

" Fuzzy file finder
"Plug 'ap/vim-css-color'
Plug expand('$XDG_CONFIG_HOME/fzf')
"Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Plug 'junegunn/fzf.vim'
Plug 'mhinz/vim-startify'
Plug 'dracula/vim'

" Git blame
Plug 'zivyangll/git-blame.vim'
Plug 'tpope/vim-fugitive'
Plug 'christoomey/vim-conflicted'

Plug 'ActivityWatch/aw-watcher-vim'

" Git conflict markers
" Plug 'rhysd/conflict-marker.vim'

" Vim rest
" Plug 'diepm/vim-rest-console'
"
Plug 'mattn/emmet-vim'


Plug 'google/vim-maktaba'
Plug 'google/vim-coverage'
Plug 'google/vim-glaive'

" Track the engine.
Plug 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'

if has('python3')
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    let g:UltiSnipsExpandTrigger="<Nop>"
    set completeopt+=noinsert
    " <TAB>: completion.
    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ coc#refresh()
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    let g:coc_snippet_next = '<tab>'
    "
    " Use <C-l> for trigger snippet expand.
    imap <C-l> <Plug>(coc-snippets-expand)

endif


" Dev icons for nerdtree
" It wants to be loaded last
Plug 'ryanoasis/vim-devicons'

call plug#end()
" ============================== General ==============================

" When re opening file, return to the latest known line
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Language
set langmenu=en_US

" Sound. Vim please be quiet. Looking at you, GVim
set noerrorbells
set vb t_vb=
autocmd GUIENTER * set vb t_vb=

" Interactive search
set hlsearch

" Real time search matches
set incsearch

" Timeout delay for <Esc>
set timeoutlen=1000 ttimeoutlen=0

set encoding=UTF-8

" ============================== Functions ==============================


fun! ToggleJournal()
    " Color name (:help cterm-colors) or ANSI code
    let g:limelight_conceal_ctermfg = 100

    " Color name (:help gui-colors) or RGB color
    let g:limelight_conceal_guifg = '#83a598'

    execute 'Goyo'
    execute 'Limelight!!'
endfun


fun! ToggleRainbow()
    if exists(":RainbowParentheses")
        execute 'RainbowParentheses'
    endif
endfun

function! s:RenameFile(new_name)
    let old_name = expand('%')
    if a:new_name != '' && a:new_name != old_name
        exec ':saveas ' . a:new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction


command -nargs=* Move :call s:RenameFile(<f-args>)


" ============================== Line numbers ==============================
" Line numbers
if version >= 703
    set relativenumber
endif
set number

" ============================== Mappings ==============================

" Lazy remaps
nmap :W :w
nmap :Q :q

" Remaps
" c-l clears text of searches
nnoremap <c-l> <c-l>:noh<cr>:SignifyRefresh<cr>

" Say no to ex mode.
map Q <Nop>

" Leader, an extra modifier
let g:mapleader = ","

" Prettier might bind to this
nmap <leader>w :w<CR>
nmap <leader>q :q<CR>

map <leader>nt :NERDTreeToggle<CR>
map <leader>pi :PlugInstall<CR>
map <leader>rt :call RainbowToggle()<CR>
map <leader>rld :source %<CR>

" https://superuser.com/a/321726
nnoremap <leader>d "_d
vnoremap <leader>d "_d
vnoremap <leader>p "_dp
vnoremap <leader>P "_dP

" ,cv = change vim
nnoremap <leader>cv :e $MYVIMRC<CR>
nnoremap <leader>snip :e $XDG_CONFIG_HOME/vim/ultisnips/<CR>
" ,fish = change fish
nnoremap <leader>fish :e ~/.config/fish/config.fish<CR>
" ,jo = Journal mode
nnoremap <leader>jo :call ToggleJournal()<CR>

nnoremap <leader>ll a<CR><ESC>
nnoremap <leader>wl :vertical resize +10<CR>
nnoremap <leader>wh :vertical resize -10<CR>



" yank to clipboard
noremap <Leader>y "*y

" https://superuser.com/a/941082
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

" https://superuser.com/questions/132029/how-do-you-reload-your-vimrc-file-without-restarting-vim
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc ++nested so $MYVIMRC | redraw
augroup END

" ============================== UI Config ==============================
" Syntax
set termguicolors
syntax on
filetype plugin indent on
let g:python_highlight_all = 1
autocmd BufEnter * syntax sync fromstart

" Looks
set background=dark

" Set 256 color support
set t_Co=256

let g:dracula_italic = 0
" Colorscheme
" colorscheme gruvbox
try
    " statusline
    colorscheme dracula
    let g:lightline = {
                \ 'colorscheme': 'dracula',
                \ 'active': {
                    \   'left': [ [ 'mode', 'paste' ],
                    \             [ 'readonly', 'filename', 'modified', 'helloworld' ],
                    \             [ 'venv', 'readonly' ],
                    \             [ 'poetv', 'readonly' ],
                    \             [ 'cocStatus', 'readonly' ] ]
                    \ },
                    \ 'component_function': {
                        \   'venv': 'virtualenv#statusline',
                        \   'poetv': 'poetv#statusline',
                        \   'cocStatus': 'coc#status',
                        \ },
                        \}
catch /^Vim\%((\a\+)\)\=:E185/
    echo 'Color scheme dracula does not exist'
endtry
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" SSH config syntax for my own ssh config
if expand('%:p') =~ "dotfiles/ssh/config"
    setf sshconfig
endif

function PythonIndent()
    echom "Called!"
    set expandtab           " enter spaces when tab is pressed
    set textwidth=120       " break lines when line length increases
    set tabstop=4           " use 4 spaces to represent tab
    set softtabstop=4
    set shiftwidth=4        " number of spaces to use for auto indent
endfunction

" Show the sign column aka gutter, to the left of the numbers, by default.
set signcolumn=yes

" ============================== Indentation ==============================
set autoindent
" There is a bug where printing a # sign when inside insert mode produces no ident. This fixes it. http://vim.wikia.com/wiki/Restoring_indent_after_typing_hash
" set cindent
" set cinkeys-=0#
" set indentkeys-=0#

" Indent options
" set tabstop=2 " How many columns will a tab look like
" set shiftwidth=2 " How many columns will be indented when using << or >>
" set softtabstop=2 " Idk.
" set expandtab " expandtab=tab will be converted to spaces

" Spaces configuration
:set tabstop=4 shiftwidth=4 expandtab

" Tab configuration, show 2 spaces as 1 tab char
" set tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab

" When editing the following file(s), use the prefered method of tab/spaces
au BufRead *git/config setf gitconfig
autocmd BufRead gitconfig setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab

" Python files should not be indented with spaces
au BufRead,BufNewFile *.py set expandtab
" SSH config syntax for my own ssh config
au BufRead *ssh/config setf sshconfig
" Python
:set tabstop=8 expandtab shiftwidth=4 softtabstop=4
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Toggle the possibility to replace indentation chars with icons/unicode chars.
set list

" Set a tab to be >> and a space. A trailing whitespace is a bullet.
set listchars=tab:»\ ,trail:•

" Set that a trailing whitespace has a yellow color
highlight ExtraWhitespace ctermfg=yellow

" Regex match for it
match ExtraWhitespace /\s\+$/

function! TabTwoSpace()
    set tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab
endfunction
" vim, treat backspace as normal
set backspace=indent,eol,start

" ============================== StatusLine ==============================
"nnnnnnn Statusline
" Always show the statusline in the terminal
set laststatus=2
" Language
set langmenu=en_US

" ============================== History ==============================
if has('persistent_undo')
    set undofile
    set undodir=~/.cache/vim/undodir
    if !isdirectory(expand(&undodir))
        :silent call system('mkdir -p ' . &undodir)
    endif
endif

" ============================== Plugin Init ==============================

if exists(":RainbowParentheses")
    execute 'RainbowParentheses'
endif

" ALE
if exists('g:ale_enabled')
    let g:ale_set_signs = 1
    highlight ALEError ctermbg=red cterm=underline
    highlight ALEWarning cterm=underline
    highlight AleErrorSign None
endif

" Startify
if has('nvim')
    autocmd TabNewEntered * Startify
else
    let g:startify_change_to_dir = 0
    autocmd VimEnter * let t:startify_new_tab = 1
    autocmd BufEnter *
                \ if !exists('t:startify_new_tab') && empty(expand('%')) |
                \   let t:startify_new_tab = 1 |
                \   Startify |
                \ endif
endif

" vim-test
function! FindTestProjectRoot(path, iterate_up_to, target_filename)
    let hidden_files = split(globpath(a:path, '.[^.]*'), '\n')
    let files = split(globpath(a:path, '*'), '\n')
    for file in files + hidden_files
        if fnamemodify(file, ':t') == a:target_filename
            return a:path
        endif
    endfor

    if a:path != a:iterate_up_to
        return FindTestProjectRoot(fnamemodify(a:path, ':h'), a:iterate_up_to, a:target_filename)
    else
        return v:null
    endif
endfunction

function! ConfigureVimTestProjectRoot()
    let opened_file = fnamemodify(expand('%'), ':p')
    let cwd = getcwd()

    let buffer_defined_project_root = get(g:, 'test#project_root', v:null)
    if opened_file =~ cwd && buffer_defined_project_root == v:null
        let output = FindTestProjectRoot(opened_file, cwd, ".testprojectroot")
        if output != v:null
            let g:test#project_root = output
        endif
    endif
endfunction

function! RunVimTestCommand(type, args)
    call test#run(a:type, split(a:args))
endfunction

function! SetVirtualEnvPath(path)
    let g:virtualenv_directory = a:path
endfunction

let g:test#javascript#mocha#file_pattern = '\v.*\.spec\.(ts|tsx)$'
function! TypeScriptTransform(cmd) abort
    return a:cmd
    # return substitute(a:cmd, '\v(.*)mocha', 'TS_NODE_FILES=true \1ts-mocha', '')
endfunction
let g:test#custom_transformations = {'typescript': function('TypeScriptTransform')}
let g:test#transformation = 'typescript'

command -nargs=* CTestFile call RunVimTestCommand('file', <q-args>)
command -nargs=* CTestNearest call RunVimTestCommand('nearest', <q-args>)
command -nargs=1 -complete=file VirtualEnvPath call SetVirtualEnvPath(<q-args>)

" vim-test
nmap <silent> t<C-n> :CTestNearest<CR>
nmap <silent> t<C-f> :CTestFile<CR>

" coc.nvim
nmap <silent> <space>q <Plug>(coc-definition)
nmap <silent> <space>rn <Plug>(coc-rename)
nmap <silent> <space>Q <Plug>(coc-type-definition)
nmap <silent> <space>b <Plug>(coc-diagnostic-prev)
nmap <silent> <space>n <Plug>(coc-diagnostic-next)
nmap <silent> <space>i <Plug>(coc-implementation)
nmap <silent> <space>r <Plug>(coc-references)
nmap <silent> <space>f :call CocAction('format')<cr>
nmap <space>ab <Plug>(coc-codeaction-selected)
nmap <space>ac <Plug>(coc-codeaction)
nmap <silent> <space>d :call <SID>show_documentation()<CR>

au FileType python let b:coc_root_patterns = ['.git', 'venv', '.venv', 'setup.cfg', 'setup.py', 'pyrightconfig.json', 'pyproject.toml', 'Pipfile']
au FileType javascript let b:coc_root_patterns = ['package.json']
au FileType vue let b:coc_root_patterns = ['package.json']
au FileType typescript let b:coc_root_patterns = ['package.json', 'tsconfig.json']
au FileType html let b:coc_root_patterns = ['.git', '.html']

" here
nmap <silent> <space>f m`gg=G``
command -nargs=* FixVue call CocAction('reloadExtension', '@yaegassy/coc-volar')
command -nargs=* FixPyright call CocAction('reloadExtension', 'coc-pyright')

command! -nargs=1 Vres vertical resize <args>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!' . &keywordprg . " " . expand('<cword>')
    endif
endfunction

augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

inoremap <silent><expr> <c-@> coc#refresh()


" fzf / ripgrep
if executable('rg')
    let $FZF_DEFAULT_COMMAND = "rg --files --hidden -g '!.git/' --ignore-file ~/dotfiles/rgignore"
endif
"let g:fzf_preview_window = []
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
let g:vim_markdown_folding_disabled = 1

autocmd FileType python map <buffer> <leader>fl :call flake8#Flake8()<CR>

" Virutal env symbol
let g:virtualenv_stl_format = '🐍 %n'
" Poetv symbol
let g:poetv_statusline_symbol = '🐍'


" BlamE(BE) someone
nnoremap <leader>be :<C-u>call gitblame#echo()<CR>
nnoremap <Leader>sy :echo synstax#UnderCursor()<CR>
" git grep
let g:gitgreppopup_disable_syntax = 1
let g:gitgreppopup_disable_syntax = 1
nnoremap <nowait> <leader>r :GitGrepRerun<cr>

" Cheat sheet
" Ctrl + W = Resize window splits
"
"
function! RipgrepFZF(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case --ignore-file ~/dotfiles/rgignore -- %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command -bang -nargs=* RR call RipgrepFZF(<q-args>, <bang>0)

command! -bang -nargs=* GGrep
            \ call fzf#vim#grep(
            \   'rg --column --line-number --no-heading --color=always --smart-case --ignore-file ~/dotfiles/rgignore '.shellescape(<q-args>), 1,
            \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0], 'options': '--delimiter : --nth 4.. --preview "bat {}"'}), <bang>0)

nnoremap <C-p> :Files<CR>
nnoremap <silent> <c-i> :GGrep<CR>

function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

" Vim diff
if &diff
    unmap <leader>nt
    " next diff
    map <leader>n :ConflictMarkerNextHunk<CR>
    " prev diff
    map <leader>b :ConflictMarkerPrevHunk<CR>

    unmap <leader>r
    map <nowait><leader>r :diffget REMOTE<CR>
    map <nowait><leader>l :diffget LOCAL<CR>
endif

command! -nargs=0 RenameFile call RenameFile()


set backupdir=$XDG_CACHE_HOME/vimTemp
if !isdirectory(expand(&backupdir))
    :silent call system('mkdir -p ' . &backupdir)
endif

let g:webdevicons_conceal_nerdtree_brackets = 1
let g:vrc_curl_opts = {
            \ '--connect-timeout' : 10,
            \ '-b': '/path/to/cookie',
            \ '-c': '/path/to/cookie',
            \ '-L': '',
            \ '-i': '',
            \ '-s': '',
            \ '--max-time': 60,
            \ '--ipv4': '',
            \ '-k': '',
            \}


if &term =~ '^xterm' && stridx(hostname(), "DESKTOP-")
    " Cursor in terminal:
    " Link: https://vim.fandom.com/wiki/Configuring_the_cursor
    " 0 -> blinking block not working in wsl
    " 1 -> blinking block
    " 2 -> solid block
    " 3 -> blinking underscore
    " 4 -> solid underscore
    " Recent versions of xterm (282 or above) also support
    " 5 -> blinking vertical bar
    " 6 -> solid vertical bar

    " normal mode
    let &t_EI .= "\e[1 q"
    " insert mode
    let &t_SI .= "\e[5 q"

    augroup windows_term
        autocmd!
        autocmd VimEnter * silent !echo -ne "\e[1 q"
        autocmd VimLeave * silent !echo -ne "\e[5 q"
    augroup END
endif

if stridx(hostname(), "DESKTOP-")
    set t_u7=
endif

autocmd! BufWritePost *.snippets call UltiSnips#RefreshSnippets()
let g:UltiSnipsSnippetDirectories = ["UltiSnips", $XDG_CONFIG_HOME.'/vim/ultisnips/']

" Prettier
nmap <Leader>pret <Plug>(Prettier)
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.svelte,*.yaml,*.html PrettierAsync

" Gofmt

function! Gofmt()
    execute ":%!gofmt<CR>"
endfunction
autocmd BufWritePre *.go Gofmt
