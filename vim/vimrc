" ============================== XDG_CONFIG STUFF =====================
set rtp+=$XDG_CONFIG_HOME/vim
set rtp+=$XDG_CACHE_HOME/vim

call plug#begin("$XDG_CACHE_HOME/$VIM_PLUGIN_DIR")

" ============================== Plugins ==============================

" Status bar revamp
Plug 'itchyny/lightline.vim'

" Git diffs
Plug 'mhinz/vim-signify', { 'branch': 'legacy' }

" Tree visualiser
Plug 'scrooloose/nerdtree'

" EditorConfig support
Plug 'editorconfig/editorconfig-vim'

" Vue support
" Plug 'posva/vim-vue'

" Rainbow parenthesis
Plug 'junegunn/rainbow_parentheses.vim'

" Python syntax highlighting
Plug 'vim-python/python-syntax'

" Fish syntax
Plug 'dag/vim-fish'

" Toml syntax
Plug 'cespare/vim-toml'

" Required by markdown
Plug 'godlygeek/tabular'

" Markdown
" Plug 'plasticboy/vim-markdown'

" Markdown preview
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}

" Shebang detection file syntax
Plug 'vitalk/vim-shebang'

" Gruvbox theme
Plug 'morhetz/gruvbox'

" Journaling(1/2). Enables a distraction free mode.
Plug 'junegunn/goyo.vim'

" Journaling(2/2). Makes non-cursor text stand out less.
Plug 'junegunn/limelight.vim'

" Tests
Plug 'vim-test/vim-test'

" Python
Plug 'w0rp/ale'
Plug 'ambv/black', { 'tag': '20.8b1' }
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'nvie/vim-flake8'
Plug 'jmcantrell/vim-virtualenv'

" Javascript
Plug 'pangloss/vim-javascript'

" Fuzzy file finder
"Plug 'ap/vim-css-color'
Plug '~/.fzf'
Plug 'junegunn/fzf.vim'
Plug 'mhinz/vim-startify'
Plug 'dracula/vim'

" Git blame
Plug 'zivyangll/git-blame.vim'

" Debug
Plug 'benknoble/vim-synstax'
" Plug '~/code/vim-gitgrepopup/'
Plug 'lilja/vim-gitgreppopup', { 'branch': 'matchadd' }
Plug 'benknoble/vim-synstax'



" Autocomplete test
if has('python3')
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    set completeopt+=noinsert
    " <TAB>: completion.
    inoremap <silent><expr> <Tab>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<Tab>" :
                \ coc#refresh()
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction
endif

call plug#end()
" ============================== General ==============================

" When re opening file, return to the latest known line
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Language
set langmenu=en_US

" Sound. Vim please be quiet. Looking at you, GVim
set noerrorbells
set vb t_vb=
autocmd GUIENTER * set vb t_vb=

" Interactive search
set hlsearch

" Real time search matches
set incsearch

" Timeout delay for <Esc>
set timeoutlen=1000 ttimeoutlen=0

set encoding=UTF-8

" ============================== Functions ==============================


fun! ToggleJournal()
    " Color name (:help cterm-colors) or ANSI code
    let g:limelight_conceal_ctermfg = 100

    " Color name (:help gui-colors) or RGB color
    let g:limelight_conceal_guifg = '#83a598'

    execute 'Goyo'
    execute 'Limelight!!'
endfun


fun! ToggleRainbow()
    if exists(":RainbowParentheses")
        execute 'RainbowParentheses'
    endif
endfun

function! s:RenameFile(new_name)
    let old_name = expand('%')
    if a:new_name != '' && a:new_name != old_name
        exec ':saveas ' . a:new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction


command -nargs=* Move :call s:RenameFile(<f-args>)


" ============================== Line numbers ==============================
" Line numbers
if version >= 703
    set relativenumber
endif
set number

" ============================== Mappings ==============================

" Lazy remaps
nmap :W :w
nmap :Q :q

" Remaps
" c-l clears text of searches
nnoremap <c-l> <c-l>:noh<cr>

" Say no to ex mode.
map Q <Nop>

" Leader, an extra modifier
let g:mapleader = ","

nmap <leader>w :w<CR>
nmap <leader>q :q<CR>

map <leader>nt :NERDTreeToggle<CR>
map <leader>pi :PlugInstall<CR>
map <leader>rt :call RainbowToggle()<CR>
map <leader>rld :source %<CR>

" https://superuser.com/a/321726
nnoremap <leader>d "_d
vnoremap <leader>d "_d
vnoremap <leader>p "_dp
vnoremap <leader>P "_dP

" ,cv = change vim
nnoremap <leader>cv :e $MYVIMRC<CR>
" ,fish = change fish
nnoremap <leader>fish :e ~/.config/fish/config.fish<CR>
" ,jo = Journal mode
nnoremap <leader>jo :call ToggleJournal()<CR>

nnoremap <leader>ff :Files<CR>
nnoremap <leader>gg :GitFiles<CR>
nnoremap <leader>ll a<CR><ESC>
nnoremap <leader>wl :vertical resize +10<CR>
nnoremap <leader>wh :vertical resize -10<CR>

" https://superuser.com/a/941082
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

" https://superuser.com/questions/132029/how-do-you-reload-your-vimrc-file-without-restarting-vim
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc ++nested so $MYVIMRC | redraw
augroup END

" ============================== UI Config ==============================
" Syntax
set termguicolors
syntax on
filetype plugin indent on
let g:python_highlight_all = 1
autocmd BufEnter * syntax sync fromstart

" Looks
set background=dark

" Set 256 color support
set t_Co=256

let g:dracula_italic = 0
" Colorscheme
" colorscheme gruvbox
try
    colorscheme dracula
    let g:lightline = {
                \ 'colorscheme': 'dracula',
                \ 'active': {
                \   'left': [ [ 'mode', 'paste' ],
                \             [ 'readonly', 'filename', 'modified', 'helloworld' ],
                \             ['venv', 'readonly'] ]
                \ },
                \ 'component_function': {
                \   'venv': 'virtualenv#statusline'
                \ },
                \}
catch /^Vim\%((\a\+)\)\=:E185/
    echo 'Color scheme dracula does not exist'
endtry

" SSH config syntax for my own ssh config
if expand('%:p') =~ "dotfiles/ssh/config"
    setf sshconfig
endif

function PythonIndent()
    echom "Called!"
    set expandtab           " enter spaces when tab is pressed
    set textwidth=120       " break lines when line length increases
    set tabstop=4           " use 4 spaces to represent tab
    set softtabstop=4
    set shiftwidth=4        " number of spaces to use for auto indent
endfunction

" Show the sign column aka gutter, to the left of the numbers, by default.
set signcolumn=yes

" ============================== Indentation ==============================
set autoindent
" There is a bug where printing a # sign when inside insert mode produces no ident. This fixes it. http://vim.wikia.com/wiki/Restoring_indent_after_typing_hash
" set cindent
" set cinkeys-=0#
" set indentkeys-=0#

" Indent options
" set tabstop=2 " How many columns will a tab look like
" set shiftwidth=2 " How many columns will be indented when using << or >>
" set softtabstop=2 " Idk.
" set expandtab " expandtab=tab will be converted to spaces

" Spaces configuration
:set tabstop=4 shiftwidth=4 expandtab

" Tab configuration, show 2 spaces as 1 tab char
" set tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab

" When editing the following file(s), use the prefered method of tab/spaces
autocmd BufRead gitconfig setlocal tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab

" Python files should not be indented with spaces
au BufRead,BufNewFile *.py set expandtab
" SSH config syntax for my own ssh config
au BufRead *ssh/config setf sshconfig
" Python
:set tabstop=8 expandtab shiftwidth=4 softtabstop=4
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Toggle the possibility to replace indentation chars with icons/unicode chars.
set list

" Set a tab to be >> and a space. A trailing whitespace is a bullet.
set listchars=tab:»\ ,trail:•

" Set that a trailing whitespace has a yellow color
highlight ExtraWhitespace ctermfg=yellow

" Regex match for it
match ExtraWhitespace /\s\+$/

function! TabTwoSpace()
    set tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab
endfunction
" vim, treat backspace as normal
set backspace=indent,eol,start

" ============================== StatusLine ==============================
"nnnnnnn Statusline
" Always show the statusline in the terminal
set laststatus=2
" Language
set langmenu=en_US

" ============================== History ==============================
set undofile
set undodir=~/.cache/vim/undodir
if !isdirectory(expand(&undodir))
    :silent call system('mkdir -p ' . &undodir)
endif

" ============================== Plugin Init ==============================

if exists(":RainbowParentheses")
    execute 'RainbowParentheses'
endif

" ALE
if exists('g:ale_enabled')
    let g:ale_set_signs = 1
    highlight ALEError ctermbg=red cterm=underline
    highlight ALEWarning cterm=underline
    highlight AleErrorSign None
endif

" Startify
if has('nvim')
    autocmd TabNewEntered * Startify
else
    let g:startify_change_to_dir = 0
    autocmd VimEnter * let t:startify_new_tab = 1
    autocmd BufEnter *
                \ if !exists('t:startify_new_tab') && empty(expand('%')) |
                \   let t:startify_new_tab = 1 |
                \   Startify |
                \ endif
endif

" vim-test
function! FindTestProjectRoot(path, iterate_up_to, target_filename)
    let hidden_files = split(globpath(a:path, '.[^.]*'), '\n')
    let files = split(globpath(a:path, '*'), '\n')
    for file in files + hidden_files
        if fnamemodify(file, ':t') == a:target_filename
            return a:path
        endif
    endfor

    if a:path != a:iterate_up_to
        return FindTestProjectRoot(fnamemodify(a:path, ':h'), a:iterate_up_to, a:target_filename)
    else
        return v:null
    endif
endfunction

function! ConfigureVimTestProjectRoot()
    let opened_file = fnamemodify(expand('%'), ':p')
    let cwd = getcwd()

    let buffer_defined_project_root = get(g:, 'test#project_root', v:null)
    if opened_file =~ cwd && buffer_defined_project_root == v:null
        let output = FindTestProjectRoot(opened_file, cwd, ".testprojectroot")
        if output != v:null
            let g:test#project_root = output
        endif
    endif
endfunction

function! RunVimTestCommand(type, args)
    call ConfigureVimTestProjectRoot()
    call test#run(a:type, split(a:args))
endfunction

function! SetVirtualEnvPath(path)
    let g:virtualenv_directory = a:path
endfunction

command -nargs=* CTestFile call RunVimTestCommand('file', <q-args>)
command -nargs=* CTestNearest call RunVimTestCommand('nearest', <q-args>)
command -nargs=1 -complete=file VirtualEnvPath call SetVirtualEnvPath(<q-args>)

" vim-test
nmap <silent> t<C-n> :CTestNearest<CR>
nmap <silent> t<C-f> :CTestFile<CR>

" coc.nvim
nmap <silent> <space>q <Plug>(coc-definition)
nmap <silent> <space>Q <Plug>(coc-type-definition)
nmap <silent> <space>b <Plug>(coc-diagnostic-prev)
nmap <silent> <space>n <Plug>(coc-diagnostic-next)
nmap <silent> <space>i <Plug>(coc-implementation)
nmap <silent> <space>r <Plug>(coc-references)
nmap <silent> <space>f m`gg=G``

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!' . &keywordprg . " " . expand('<cword>')
    endif
endfunction
nmap <silent> <space>d :call <SID>show_documentation()<CR>

let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
let g:vim_markdown_folding_disabled = 1

autocmd FileType python map <buffer> <leader>fl :call flake8#Flake8()<CR>

" Virutal env symbol
let g:virtualenv_stl_format = '🐍 %n'

" BlamE(BE) someone
nnoremap <leader>be :<C-u>call gitblame#echo()<CR>
nnoremap <Leader>sy :echo synstax#UnderCursor()<CR>
" git grep
let g:gitgreppopup_disable_syntax = 1

" Cheat sheet
" Ctrl + W = Resize window splits
