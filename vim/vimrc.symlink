" Syntax 
syntax on

" Looks
set background=dark

" When re opening file, return to the latest known line
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Line numbers
if version >= 703
	set relativenumber
endif
set number

" Font
if has("gui_running")
	if has("gui_gtk2")
		set guifont=Inconsolata\ 12
	elseif has("gui_macvim")
		set guifont=Menlo\ Regular:h14
	elseif has("gui_win32")
		  set guifont=Monaco:h11:cANSI
	endif
endif

" Maps
nmap :W :w
nmap :Q :q

" Remaps
inoremap <C-C> <esc>
nnoremap <c-l> <c-l>:noh<cr>
nnoremap <F2> i<CR><ESC>

" Tab
set autoindent
set smartindent
" There is a bug where printing a # sign when inside insert mode produces no ident. This fixes it. http://vim.wikia.com/wiki/Restoring_indent_after_typing_hash
set cindent
set cinkeys-=0#
set indentkeys-=0#

" Indent options
set tabstop=2 " How many columns will a tab look like
set shiftwidth=2 " How many columns will be indented when using << or >>
set softtabstop=2 " Idk.
set noexpandtab " expandtab=tab will be converted to spaces

" Spaces configuration
" :set tabstop=4 shiftwidth=4 expandtab

" Statusline
" Always show the statusline in the terminal
set laststatus=2

augroup Focus
	au!
	au WinEnter * call A()
	au WinLeave * call U()
augroup END

let g:modes = {"n":"NORMAL", "i":"INSERT", "v":"VISUAL" }

function! ModeText(mode)
	if(winwidth(0)<60)
		return mode()
	else
		if !has_key(g:modes, a:mode)
	     return '  OTHER '
		else
			return "  " . g:modes[a:mode] . " "
		endif
	endif
endfunction

function ModeColor()
	if mode() == "n"
		" If normal mode
		hi modecolor ctermbg=green ctermfg=black
	elseif mode() == "i"
		" If insert mode
		hi modecolor ctermbg=blue ctermfg=black
	elseif mode() == "v"
		" If visual mode
		hi modecolor ctermbg=white ctermfg=black
	else
		" If other not configured mode
		hi modecolor ctermbg=white ctermfg=black
	endif

	return ''
endfunction

function PrettyCWD(wd)
		if (winwidth(0)>60)
			return substitute(a:wd, $HOME, "~", "")
		endif
	return ''
endfunction

function Br()
	return system("which git >/dev/null && git rev-parse --abbrev-ref HEAD")[:-2]
endfunction

let g:branch = Br()
function U()
	exe 'setl stl=%8*%t%y%=%{g:branch}\ %{PrettyCWD(getcwd())}'
endfunction
function A()
	exe 'setl stl=%{ModeColor()}%#modecolor#%{ModeText(mode())}%5*%m%r%6*\ %t%y%9*%=%7*%{g:branch}%6*\ %{PrettyCWD(getcwd())}'
endfunction

hi User1 ctermbg=green ctermfg=black
hi User2 ctermbg=blue ctermfg=black
hi User3 ctermbg=white ctermfg=black
hi User4 ctermbg=grey ctermfg=black
hi User5 ctermbg=none ctermfg=red
hi User6 ctermbg=black ctermfg=grey
hi User7 ctermbg=none ctermfg=blue
hi User8 ctermbg=blue  ctermfg=grey
hi User9 ctermbg=black ctermfg=black

" Set the overall font color
hi! StatusLine ctermfg=black  ctermbg=white
hi! StatusLineNC ctermfg=blue ctermbg=blue

call A()

" Language
set langmenu=en_US

" Interactive search
set hlsearch
" Real time search matches
set incsearch

" Sound. Vim please be quiet. Looking at you, GVim
set noerrorbells
set vb t_vb=
autocmd GUIENTER * set vb t_vb=

